{"version":3,"sources":["components/ProfileCard.jsx","components/TreeNode.tsx","components/Tree.tsx","utils/utils.tsx","App.js","index.js"],"names":["ProfileCard","props","userName","userDesignation","joinedOn","userImg","numberOfChildren","className","id","src","alt","title","verticalLine","css","childrenContainer","node","nodeLines","TreeNode","emp","children","label","cx","userJoinedOn","userPhoto","React","count","Tree","lineHeight","lineWidth","lineColor","nodePadding","lineBorderRadius","undefined","sid","convertDirData","axios","post","command","client","data","status","empDir","map","userId","employeeId","userFirstName","firstname","lastname","profilepic","designations","length","designation","moment","startdate","format","userReportingTo","reportingTo","scale","App","useState","IsLoading","setIsLoading","empDirState","setEmpDirState","empDirFullState","setEmpDirFullState","scaleCanvas","scaleFactor","lengthOfChildren","windowWidth","window","innerWidth","Number","toFixed","document","getElementById","style","transform","getOrgData","a","res","Array","from","convertedDir","x","filter","y","_prev","useEffect","catch","scrollIntoView","behavior","block","inline","genParent","CurrEmp","Parent","find","onNodeClick","event","setTimeout","stopPropagation","parents","onClick","e","genTreeNode","parentName","options","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","height","width","rootElement","createRoot","render"],"mappings":"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","file":"static/js/main.41d4fd72.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ProfileCard.css\";\r\n\r\nconst ProfileCard = (props) => {\r\n  const {\r\n    userName,\r\n    userDesignation,\r\n    joinedOn,\r\n    userImg,\r\n    numberOfChildren\r\n  } = props;\r\n  return (\r\n    <div className={\"cardContainer\"} id={props.id}>\r\n      <div className=\"cardInfo\">\r\n        <div className={\"userImgContainer\"}>\r\n          <img src={userImg} alt=\"\" className={\"userImg\"} />\r\n          <img\r\n            className=\"userImgPlaceHolder\"\r\n            src=\"https://unicef.github.io/react-org-chart/static/media/avatar-personnel.f8399445.svg\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className={\"userDetails\"}>\r\n          <div className={\"userDetails_top\"}>\r\n            <div className={\"userName\"} title={userName}>\r\n              {userName}\r\n            </div>\r\n            <div className={\"userDesignation\"}>{userDesignation}</div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className={\"joinedOn\"}>Joined on {joinedOn}</div>\r\n          <div className={\"supervisee\"}>{numberOfChildren} Supervisee</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileCard;\r\n","import * as React from \"react\";\r\nimport { css, cx } from \"@emotion/css\";\r\nimport type { ReactNode } from \"react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport interface TreeNodeProps {\r\n  /**\r\n   * The node label\r\n   * */\r\n  label?: React.ReactNode;\r\n  className?: string;\r\n  children?: ReactNode;\r\n  emp: any;\r\n}\r\n\r\nconst verticalLine = css`\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 0;\r\n  height: var(--tree-line-height);\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst childrenContainer = css`\r\n  display: flex;\r\n  padding-inline-start: 0;\r\n  margin: 0;\r\n  padding-top: var(--tree-line-height);\r\n  position: relative;\r\n\r\n  ::before {\r\n    ${verticalLine};\r\n    left: 50%;\r\n    width: 0;\r\n    border-left: var(--tree-line-width) solid var(--tree-line-color);\r\n  }\r\n`;\r\n\r\nconst node = css`\r\n  flex: auto;\r\n  text-align: center;\r\n  list-style-type: none;\r\n  position: relative;\r\n  padding: var(--tree-line-height) var(--tree-node-padding) 0\r\n    var(--tree-node-padding);\r\n`;\r\n\r\nconst nodeLines = css`\r\n  ::before,\r\n  ::after {\r\n    ${verticalLine};\r\n    right: 50%;\r\n    width: 50%;\r\n    border-top: var(--tree-line-width) solid var(--tree-line-color);\r\n  }\r\n  ::after {\r\n    left: 50%;\r\n    border-left: var(--tree-line-width) solid var(--tree-line-color);\r\n  }\r\n\r\n  :only-of-type {\r\n    padding: 0;\r\n    ::after,\r\n    :before {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  :first-of-type {\r\n    ::before {\r\n      border: 0 none;\r\n    }\r\n    ::after {\r\n      border-radius: var(--tree-line-border-radius) 0 0 0;\r\n    }\r\n  }\r\n\r\n  :last-of-type {\r\n    ::before {\r\n      border-right: var(--tree-line-width) solid var(--tree-line-color);\r\n      border-radius: 0 var(--tree-line-border-radius) 0 0;\r\n    }\r\n    ::after {\r\n      border: 0 none;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction TreeNode({\r\n  emp,\r\n  children,\r\n  label,\r\n  className,\r\n  ...props\r\n}: TreeNodeProps) {\r\n  return (\r\n    <li className={cx(node, nodeLines, className)} {...props}>\r\n      {emp && (\r\n        <ProfileCard\r\n          userName={emp.userName}\r\n          userDesignation={emp.userDesignation}\r\n          joinedOn={emp.userJoinedOn}\r\n          userImg={emp.userPhoto}\r\n          numberOfChildren={emp.numberOfChildren}\r\n          id={emp.id}\r\n        />\r\n      )}\r\n      {React.Children.count(children) > 0 && (\r\n        <ul className={childrenContainer}>{children}</ul>\r\n      )}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TreeNode;\r\n","import * as React from \"react\";\r\nimport { css } from \"@emotion/css\";\r\n\r\nimport TreeNode, { TreeNodeProps } from \"./TreeNode\";\r\n\r\nexport interface TreeProps {\r\n  /**\r\n   * The root label\r\n   * */\r\n  label: TreeNodeProps[\"label\"];\r\n  emp: any;\r\n  /**\r\n   * The height of the line\r\n   */\r\n  lineHeight?: string;\r\n  /**\r\n   * The width of the line\r\n   */\r\n  lineWidth?: string;\r\n  /**\r\n   * The color of the line\r\n   */\r\n  lineColor?: string;\r\n  /**\r\n   * The border radius of the line\r\n   */\r\n  lineBorderRadius?: string;\r\n  /**\r\n   * The padding between siblings\r\n   */\r\n  nodePadding?: string;\r\n  children: TreeNodeProps[\"children\"];\r\n}\r\n\r\n/**\r\n * The root of the hierarchy tree\r\n */\r\nfunction Tree({\r\n  children,\r\n  label,\r\n  lineHeight = \"20px\",\r\n  lineWidth = \"1px\",\r\n  lineColor = \"black\",\r\n  nodePadding = \"5px\",\r\n  lineBorderRadius = \"5px\",\r\n  emp = undefined,\r\n  ...props\r\n}: TreeProps) {\r\n  return (\r\n    <ul\r\n      className={css`\r\n        padding-inline-start: 0;\r\n        margin: 0;\r\n        display: flex;\r\n\r\n        --line-height: ${lineHeight};\r\n        --line-width: ${lineWidth};\r\n        --line-color: ${lineColor};\r\n        --line-border-radius: ${lineBorderRadius};\r\n        --node-padding: ${nodePadding};\r\n\r\n        --tree-line-height: var(--line-height, 20px);\r\n        --tree-line-width: var(--line-width, 1px);\r\n        --tree-line-color: var(--line-color, black);\r\n        --tree-line-border-radius: var(--line-border-radius, 5px);\r\n        --tree-node-padding: var(--node-padding, 5px);\r\n      `}\r\n    >\r\n      <TreeNode emp={emp} {...props}>\r\n        {children}\r\n      </TreeNode>\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default Tree;\r\n","import moment from \"moment\";\r\nimport axios from \"axios\";\r\n\r\nexport const sid = \"h700c2qthusq2itics4covhgs1\";\r\n\r\nexport const getNestorData = axios.post(\r\n  \"https://nestor.divami.com/request.php\",\r\n  {\r\n    command: \"getEmployeeListView\",\r\n    client: { sid },\r\n    data: { status: \"Active\" }\r\n  }\r\n);\r\n\r\nconst checkImg = async (url: string) => {\r\n  try {\r\n    const res = await axios.get(url);\r\n    if (res.status === 200) {\r\n      return url;\r\n    }\r\n    return false;\r\n  } catch (_err) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const convertDirData = (empDir: any) => {\r\n  return empDir.map((emp: { employeeId: any; firstname: string; lastname: string; profilepic: string; designations: string | any[]; startdate: moment.MomentInput; }) => ({\r\n    userId: emp.employeeId,\r\n    userFirstName: emp.firstname,\r\n    userName: emp.firstname + \" \" + emp.lastname,\r\n    userPhoto: \"https://nestor.divami.com\" + emp.profilepic, // checkImg(\"https://nestor.divami.com\" + emp.profilepic),\r\n    userDesignation:\r\n      emp.designations && emp.designations.length\r\n        ? emp.designations[emp.designations.length - 1].designation\r\n        : \"Unassigned\",\r\n    userJoinedOn: moment(emp.startdate, \"YYYY-MM-DD\").format(\"DD MMM, YYYY\"),\r\n    userReportingTo:\r\n      emp.designations && emp.designations.length\r\n        ? emp.designations[emp.designations.length - 1].reportingTo\r\n        : \"null\"\r\n  }));\r\n};\r\n","import \"./styles.css\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport TreeNode from \"./components/TreeNode\";\nimport Tree from \"./components/Tree\";\nimport { convertDirData, getNestorData, sid } from \"./utils/utils\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"./utils/loading-lottie\";\n\nvar scale = 0.75;\n\nexport default function App() {\n  const [IsLoading, setIsLoading] = useState(\"loading\");\n  const [empDirState, setEmpDirState] = useState([]);\n  const [empDirFullState, setEmpDirFullState] = useState([]);\n\n  const scaleCanvas = (numberOfChildren) => {\n    let scaleFactor = scale;\n    let lengthOfChildren = (numberOfChildren + 1) * 183;\n    let windowWidth = window.innerWidth;\n\n    scaleFactor = Number(Number(windowWidth / lengthOfChildren).toFixed(2));\n    // console.log(\"scaleFactor\", scaleFactor, lengthOfChildren, windowWidth)\n    if (scaleFactor > scale) {\n      scaleFactor = scale;\n    }\n    document.getElementById(\n      \"AppCanvas\"\n    ).style.transform = `scale(${scaleFactor})`;\n  };\n\n  const getOrgData = async () => {\n    try {\n      const res = await axios.post(\"https://nestor.divami.com/request.php\", {\n        command: \"getEmployeeListView\",\n        client: { sid: sid },\n        data: { status: \"Active\" }\n      });\n      const empDir = Array.from(res?.data?.data);\n      let convertedDir = convertDirData(empDir);\n      convertedDir = convertedDir.map((x) => ({\n        ...x,\n        id: `tree-node-${x.userId}`,\n        numberOfChildren: convertedDir.filter(\n          (y) => y.userReportingTo === x.userFirstName\n        ).length\n      }));\n      // const root = convertedDir.find((x) => x.userReportingTo === null);\n      setEmpDirState((_prev) => [\n        { ...convertedDir[0] },\n        ...convertedDir.filter(\n          (x) => x.userReportingTo === convertedDir[0].userFirstName\n        )\n      ]);\n      setEmpDirFullState(convertedDir);\n    } catch (err) {\n      setIsLoading(\"API Call Failed\");\n    }\n  };\n\n  useEffect(() => {\n    getOrgData().catch();\n    scaleCanvas(scale);\n  }, []);\n  useEffect(() => {\n    if (IsLoading === \"loading\" && document.getElementById(\"loader\")) {\n      document.getElementById(\"loader\").scrollIntoView({\n        behavior: \"smooth\",\n        block: \"center\",\n        inline: \"center\"\n      });\n    }\n    if (IsLoading !== \"loading\" && document.getElementById(\"App\")) {\n      document.getElementById(\"App\").scrollIntoView({\n        behavior: \"smooth\",\n        block: \"center\",\n        inline: \"center\"\n      });\n    }\n  });\n\n  const genParent = (CurrEmp, Parent) => {\n    if (CurrEmp.userReportingTo !== null) {\n      const CurrEmpParent = empDirFullState.find(\n        (x) => x.userFirstName === CurrEmp.userReportingTo\n      );\n      return genParent(CurrEmpParent, [CurrEmp, ...Parent]);\n    } else return [CurrEmp, ...Parent];\n  };\n\n  const onNodeClick = (event, emp) => {\n    setTimeout(() => {\n      document.getElementById(emp.id).scrollIntoView({\n        behavior: \"smooth\",\n        block: \"center\",\n        inline: \"start\"\n      });\n      scaleCanvas(\n        empDirFullState.filter((x) => x.userReportingTo === emp.userFirstName)\n          .length\n      );\n    }, 500);\n    event.stopPropagation();\n    let parents = [];\n    parents = genParent(emp, parents);\n    const children = empDirFullState.filter(\n      (x) => x.userReportingTo === emp.userFirstName\n    );\n    setEmpDirState((_prev) => [...parents, ...children]);\n  };\n\n  const genTreeNode = (parentName) => {\n    return empDirState\n      .filter((emp) => emp.userReportingTo === parentName)\n      .map((emp) => (\n        <TreeNode emp={emp} onClick={(e) => onNodeClick(e, emp)}>\n          {genTreeNode(emp.userFirstName)}\n        </TreeNode>\n      ));\n  };\n\n  return (\n    <div className=\"AppCanvas\" id=\"AppCanvas\">\n      <div className=\"App\" id=\"App\">\n        {empDirState.length > 0 ? (\n          <Tree\n            lineWidth={\"3px\"}\n            lineColor={\"#ccc\"}\n            lineBorderRadius={\"50px\"}\n            emp={empDirState[0]}\n            onClick={(e) => onNodeClick(e, empDirState[0])}\n          >\n            {genTreeNode(empDirState[0].userFirstName)}\n          </Tree>\n        ) : (\n          <div className=\"loader\" id=\"loader\">\n            {IsLoading === \"loading\" ? (\n              <div>\n                <Lottie\n                  options={{\n                    loop: true,\n                    autoplay: true,\n                    animationData: animationData,\n                    rendererSettings: {\n                      preserveAspectRatio: \"xMidYMid slice\"\n                    }\n                  }}\n                  height={400}\n                  width={500}\n                />\n                <img\n                  className=\"logo\"\n                  src=\"https://www.divami.com/assets/images/divami_logo.svg?1564635070497\"\n                  alt=\"Divami Design Labs Logo\"\n                />\n              </div>\n            ) : (\n              IsLoading\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}